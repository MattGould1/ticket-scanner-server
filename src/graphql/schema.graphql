# The @auth directive is used to mark fields that require authentication
# When applied to a field, it ensures the user is authenticated before accessing that field

scalar DateTime

type User {
  username: String!
  teamId: String!
  teamName: String!
}

type AuthThings {
  hidden: String!
}

type Event {
  id: String!
  teamId: String!
  name: String!
  startDate: DateTime!
  endDate: DateTime!
  venue: String
  description: String
  image: String
}

type EventsWithPagination {
  events: [Event!]!
  total: Int!
}

input PaginationInput {
  offset: Int
  limit: Int
}

type EventAttendee {
  id: String!
  name: String!
  email: String!
  phone: String
  ticketId: String!
  customerSpecialRequest: String
  checkedInAt: DateTime
}

type EventAttendeesWithPagination {
  attendees: [EventAttendee!]!
  total: Int!
}

type Query {
  getUser: User! @auth
  getEvents(pagination: PaginationInput): EventsWithPagination! @auth
  getEventAttendees(
    eventId: String!
    pagination: PaginationInput
  ): EventAttendeesWithPagination! @auth
}

type EventAttendeeVerification {
  eventAttendee: EventAttendee!
  alreadyCheckedIn: Boolean!
}

type Mutation {
  verifyEventAttendee(
    eventId: String!
    eventAttendeeId: String!
  ): EventAttendeeVerification! @auth
}

schema {
  query: Query
  mutation: Mutation
  # subscription: Subscription
}
